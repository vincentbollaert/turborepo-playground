// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  getFeatures,
  postFeatures,
  deleteFeaturesById,
} from "../sdk.gen";
import {
  queryOptions,
  type UseMutationOptions,
  type DefaultError,
} from "@tanstack/react-query";
import type {
  GetFeaturesData,
  PostFeaturesData,
  PostFeaturesResponse,
  DeleteFeaturesByIdData,
} from "../types.gen";
import { client as _heyApiClient } from "../client.gen";

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const getFeaturesQueryKey = (options?: Options<GetFeaturesData>) =>
  createQueryKey("getFeatures", options);

export const getFeaturesOptions = (options?: Options<GetFeaturesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getFeatures({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getFeaturesQueryKey(options),
  });
};

export const postFeaturesQueryKey = (options: Options<PostFeaturesData>) =>
  createQueryKey("postFeatures", options);

export const postFeaturesOptions = (options: Options<PostFeaturesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postFeatures({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postFeaturesQueryKey(options),
  });
};

export const postFeaturesMutation = (
  options?: Partial<Options<PostFeaturesData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostFeaturesResponse,
    DefaultError,
    Options<PostFeaturesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postFeatures({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteFeaturesByIdMutation = (
  options?: Partial<Options<DeleteFeaturesByIdData>>,
) => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<DeleteFeaturesByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteFeaturesById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};
