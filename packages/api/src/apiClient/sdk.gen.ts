// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from "@hey-api/client-fetch";
import type {
  GetFeaturesData,
  GetFeaturesResponse,
  PostFeaturesData,
  PostFeaturesResponse,
  DeleteFeaturesByIdData,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Get features
 */
export const getFeatures = <ThrowOnError extends boolean = false>(
  options?: Options<GetFeaturesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<GetFeaturesResponse, unknown, ThrowOnError>({
    url: "/features",
    ...options,
  });
};

/**
 * Add a new feature
 */
export const postFeatures = <ThrowOnError extends boolean = false>(
  options: Options<PostFeaturesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<PostFeaturesResponse, unknown, ThrowOnError>({
    url: "/features",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Remove a feature
 */
export const deleteFeaturesById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteFeaturesByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
    url: "/features/{id}",
    ...options,
  });
};
